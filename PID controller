#controller Implementing motor control:
import pybullet as p
import pybullet_data
import time
import os, inspect
import numpy as np
import math 

currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
print("current_dir=" + currentdir)
parentdir = os.path.join(currentdir, "../gym")
os.sys.path.insert(0, parentdir)

cid = p.connect(p.SHARED_MEMORY)
if (cid < 0):
  p.connect(p.GUI)

p.resetSimulation()
p.setGravity(0, 0, -10)

useRealTimeSim = 1
p.setRealTimeSimulation(useRealTimeSim) 
#p.loadURDF("plane.urdf")
p.loadSDF(os.path.join(pybullet_data.getDataPath(), "stadium.sdf"))

car = p.loadURDF(os.path.join(pybullet_data.getDataPath(), "racecar/racecar.urdf"))
for i in range(p.getNumJoints(car)):
  print(p.getJointInfo(car, i))
inactive_wheels = [5, 7]
wheels = [3,2]

for wheel in inactive_wheels:
  p.setJointMotorControl2(car, wheel, p.VELOCITY_CONTROL, targetVelocity=0, force=0)



steering = [4, 6]
targetVelocitySlider = p.addUserDebugParameter("wheelVelocity", -10, 10, 0)
maxForceSlider = p.addUserDebugParameter("maxForce", 0, 10, 10)
steeringSlider = p.addUserDebugParameter("steering", -0.5, 0.5, 0)
goal = [-10,-10]


while (True):
  maxForce = p.readUserDebugParameter(maxForceSlider)
  #targetVelocity = p.readUserDebugParameter(targetVelocitySlider)
  #steeringAngle = p.readUserDebugParameter(steeringSlider)

  carpos, caror = p.getBasePositionAndOrientation(car) #get position and orientation
  angulo = p.getEulerFromQuaternion(caror)
  yaw = angulo[2]

  #calculating the distance,angle and velocities 
  distance = np.sqrt((goal[0]-carpos[0])**2 + (goal[1]- carpos[1])**2) #distance = sqrt((x2-x1)^2 + (y2-y1^2))
  theta = math.atan2((goal[1]- carpos[1]), (goal[0]-carpos[0]))        #angle = arctan ((y2-y1)/(x2-x1))
  max_sa = .5 #maximum sterring angle 
  vel = 3.5*distance
  gamma = theta - yaw #the actual angle we need to input


  for wheel in wheels:
    p.setJointMotorControl2(car,
                            wheel,
                            p.VELOCITY_CONTROL,
                            targetVelocity=vel,
                            force=maxForce)

  for steer in steering:
    p.setJointMotorControl2(car, steer, p.POSITION_CONTROL, targetPosition=gamma)

  steering
  if (useRealTimeSim == 0):
    p.stepSimulation()
  time.sleep(0.01)
